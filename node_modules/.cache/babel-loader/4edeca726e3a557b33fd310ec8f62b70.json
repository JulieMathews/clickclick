{"ast":null,"code":"import _objectSpread from \"/Users/juliemathews/Development/in_class/week11-20/19-react/2-Homework/clickclick/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/juliemathews/Development/in_class/week11-20/19-react/2-Homework/clickclick/my-app/src/components/board/board.js\";\nimport React, { Component } from 'react';\nimport FadeIn from '../transitions/fade-in';\nimport ElephantBox from './elephantBox';\nimport ScoreDisplay from './scoredisplay';\n\nconst shuffleArray = arr => arr.map(a => [Math.random(), a]).sort((a, b) => a[0] - b[0]).map(a => a[1]);\n\nconst initialChars = [{\n  name: 'Elephant01',\n  img: 'images/img/e1.jpeg',\n  clicked: false\n}, {\n  name: 'Elephant02',\n  img: 'images/img//e2.jpeg',\n  clicked: false\n}, {\n  name: 'Elephant03',\n  img: 'images/img/e3.jpeg',\n  clicked: false\n}, {\n  name: 'Elephant04',\n  img: 'images/img/e4.jpeg',\n  clicked: false\n}, {\n  name: 'Elephant05',\n  img: 'images/img/e5.jpeg',\n  clicked: false\n}, {\n  name: 'Elephant06',\n  img: 'images/img/e6.jpeg',\n  clicked: false\n}, {\n  name: 'Elephant07',\n  img: 'images/img/e7.jpeg',\n  clicked: false\n}, {\n  name: 'Elephant08',\n  img: 'images/img/e8.jpeg',\n  clicked: false\n}, {\n  name: 'Elephant09',\n  img: 'images/img/e9.jpeg',\n  clicked: false\n}, {\n  name: 'Elephant10',\n  img: 'images/img/e10.jpeg',\n  clicked: false\n}, {\n  name: 'Elephant11',\n  img: 'images/img/e11.jpeg',\n  clicked: false\n}, {\n  name: 'Elephant12',\n  img: 'images/img/e12.jpeg',\n  clicked: false\n}];\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClick = index => {\n      if (!this.state.elephants[index].clicked) {\n        this.setState({\n          elephants: shuffleArray(this.state.elephants.map((elephant, current) => {\n            return current === index ? _objectSpread({}, elephant, {\n              clicked: true\n            }) : elephant;\n          })),\n          user: _objectSpread({}, this.state.user, {\n            score: this.state.user.score + 1\n          })\n        }); //and shuffle\n      } else {\n        this.setState({\n          elephants: shuffleArray(this.state.elephants.map(elephant => {\n            return _objectSpread({}, elephant, {\n              clicked: false\n            });\n          })),\n          user: _objectSpread({}, this.state.user, {\n            score: 0\n          })\n        }); //and shuffle\n      }\n    };\n\n    this.state = {\n      user: {\n        score: 0\n      },\n      elephants: shuffleArray(initialChars)\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"Board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(FadeIn, {\n      in: true,\n      duration: 450,\n      length: '30px',\n      direction: 'bottom',\n      delay: '1s',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, \"Try to click on every elephant once. Once you click an elephant, the grid will shuffle.\", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), \"Try not to click the same elephant twice or the game will start all over!\")), React.createElement(FadeIn, {\n      in: true,\n      duration: 500,\n      direction: 'bottom',\n      delay: '1.5s',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(ScoreDisplay, {\n      score: this.state.user.score,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    })), React.createElement(ElephantBox, {\n      elephants: this.state.elephants,\n      onClick: this.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/juliemathews/Development/in_class/week11-20/19-react/2-Homework/clickclick/my-app/src/components/board/board.js"],"names":["React","Component","FadeIn","ElephantBox","ScoreDisplay","shuffleArray","arr","map","a","Math","random","sort","b","initialChars","name","img","clicked","Board","constructor","props","onClick","index","state","elephants","setState","elephant","current","user","score","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport FadeIn from '../transitions/fade-in';\nimport ElephantBox from './elephantBox';\nimport ScoreDisplay from './scoredisplay';\n\nconst shuffleArray = arr => (\n    arr\n      .map(a => [Math.random(), a])\n      .sort((a, b) => a[0] - b[0])\n      .map(a => a[1]) \n);\n\nconst initialChars = [\n    {\n        name: 'Elephant01',\n        img: 'images/img/e1.jpeg',\n        clicked: false\n    },\n    {\n        name: 'Elephant02',\n        img: 'images/img//e2.jpeg',\n        clicked: false\n    },\n    {\n        name: 'Elephant03',\n        img: 'images/img/e3.jpeg',\n        clicked: false\n    },\n    {\n        name: 'Elephant04',\n        img: 'images/img/e4.jpeg',\n        clicked: false\n    },\n    {\n        name: 'Elephant05',\n        img: 'images/img/e5.jpeg',\n        clicked: false\n    },\n    {\n        name: 'Elephant06',\n        img: 'images/img/e6.jpeg',\n        clicked: false\n    },\n    {\n        name: 'Elephant07',\n        img: 'images/img/e7.jpeg',\n        clicked: false\n    },\n    {\n        name: 'Elephant08',\n        img: 'images/img/e8.jpeg',\n        clicked: false\n    },\n    {\n        name: 'Elephant09',\n        img: 'images/img/e9.jpeg',\n        clicked: false\n    },\n    {\n        name: 'Elephant10',\n        img: 'images/img/e10.jpeg',\n        clicked: false\n    },\n    {\n        name: 'Elephant11',\n        img: 'images/img/e11.jpeg',\n        clicked: false\n    },\n    {\n        name: 'Elephant12',\n        img: 'images/img/e12.jpeg',\n        clicked: false\n    }\n]\n\nexport default class Board extends Component {\n\n    constructor(props){\n        super(props);\n\n        this.state = {\n            user: {\n                score: 0 \n            },\n            elephants: shuffleArray( initialChars )\n        };\n    }\n\n    onClick = ( index ) =>{\n        if( !this.state.elephants[index].clicked ){\n            this.setState({\n                elephants: shuffleArray( this.state.elephants.map( (elephant, current) =>  {\n                    return ( current === index ) ? { ...elephant, clicked:true } : elephant\n                })),\n                user: {\n                    ...this.state.user,\n                    score: this.state.user.score + 1\n                }\n            });\n            //and shuffle\n        } else {\n            this.setState({\n                elephants: shuffleArray(this.state.elephants.map( elephant => { return { ...elephant, clicked : false } })),\n                user: {\n                    ...this.state.user,\n                    score: 0\n                }\n            });\n            //and shuffle\n        }\n        \n    }\n\n    render(){\n        return (\n            <div className=\"Board\">\n                <FadeIn \n                    in={true}\n                    duration={450}\n                    length={'30px'}\n                    direction={'bottom'}\n                    delay={'1s'}>\n                    <h4>Try to click on every elephant once. Once you click an elephant, the grid will shuffle.<br/>Try not to click the same elephant twice or the game will start all over!</h4>\n                </FadeIn>\n                <FadeIn \n                    in={true}\n                    duration={500}\n                    direction={'bottom'}\n                    delay={'1.5s'}>\n                    <ScoreDisplay\n                        score={this.state.user.score} />\n                </FadeIn>\n                <ElephantBox \n                    elephants={this.state.elephants} \n                    onClick={this.onClick} />\n            </div>\n        )\n    }\n\n}"]},"metadata":{},"sourceType":"module"}